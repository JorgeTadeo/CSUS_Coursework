LCS

LCS(x,y) = {
			  1+LCS(x-1,y-1)                if xi = yi 
			  Max(LCS(x,y-1) , LCS(x-1,y)   if x1 != yi 
		    }
			
def LCS_TOP(x,y):
	n = len(x)
	m = len(y)
	t = [[-1 for i in range(m+1)] for j in range(n+1)] 
	for i in range(n+1):
		t[0][i] = 0
		t[i][0] = 0
	return LCS_helper(x,y,t)

def LCS_helper(x,y,t):
	n = len(x)
	m = len(y)
	if t[n][m] >= 0:
		return t[n][m]
	res = 0 
	if x[-1] == y[-1]:
		res = 1 + LCS_helper(x[:-1],y[:-1],t)
	else:
		res = max(LCS_helper(x[:-1],y,t),LCS_helper(x,y[:-1],t))
	t[n][m] = res 
	return res 

	
		
LCS(X,Y)
	m=X.length , n=Y.length
	Create 2D array t[n+1,m+1] 
	Fill in 0's for 1st row and 1st rolumn 
	for i = 1 to m 
		for j = 1 to n 
			if X[i] == Y[i]
				t[i][j] = t[i-1][j-1] + 1 
			else
				t[i][j] = max(t[i-1][j] , t[i][j-1] 
	return t[n][m] 
	
Gen()
	String s 
	i = m , j = n 
	while(i>= 1 && j>= 1)
		if X[i]==Y[i] 
			s += X[i] 
			i-- , j-- 
		elseif t[i-1][j] >= t[i][j-1] 
			i-- 
		else
			j-- 
	return s 
	
	
LCS(sub string) 

LCS(X,Y) = {
			1+LCS(X-1,Y-1) if Xi = Yi 
			LCS(X-1,Y-1)   if Xi != Yi
			
			}

LCS(X,Y)
		m = X.length , n=Y.length 
		fill entire mxn with 0's 
		maxI=0 maxJ=0 MAXLCS=0
		for i = 1 to m 
			for j = 1 to n 
				if X[i] == Y[i] 
					t[i][j] = t[i-1][j-1] + 1 
					if t[i][j] > MAXLCS 
						MAXLCS = t[i][j] 
						maxI = i 
						maxJ = j 
						
Gen(X,maxI,MAXLCS)
	if MAXLCS == 1 
		print X[maxI] 
	else 
		Gen(X,maxI-1,MAXLCS-1)
		
		


RodCut(n)=max_(1≤i=n)⁡(p[i]+RodCut(n−i))


S=[0..n] = {-inf} 
RodCut(n)
	if S[n] >= 0 
		return S[n] 
	if n == 0 
		q = 0
	else 
		q = inf 
		for i = 1 to n 
			q = max(q , p[i] + RodCut(n-i)	
	s[n] = q
	return q 

	
RodCut(n)
	s[0..n] = {0} 
	for i = 1 to n 
		q = -inf 
		for j = 1 to i 
			q = max(q, p[j]+s[i-j])
		s[i] = q 
	return s[n] 
	
	
	
Matrix

m[i,j]  = { 0  if i=j 
			min  {     m[i,k] + m[k+1,k] + p_i-1 p_k p_j }  if i < j 
			i<=k<=j 

matrix_chain_order(p)
	n = p.length - 1 
	let m[1..n , 1..n] and s[1..n-1 , 2..n] 
	for i = 1 to n 
		m[i,i] = 0 
	for l=2 to n 
		for i = 1 to n-l+1 
			j = i+l-1 
			m[i,j] = inf 
			for k = i to j - 1 
				q = m[i,k]+m[k+1 , k] + pi-1pkpj 
			if q < m[i,j] 
				m[i,j] = q 
				s[i,j] = k 
	return m,s 
	
	
top_down_matrix(p,i,j)
	if i == j 
		return 0 
	m[i,j] = inf 
	for k = i to j-1 
		q = top_down_matrix(p,i,k)
		   + top_down_matrix(p,k+1,j)
		   + p_i-1pkpj
		if q < m[i,j] 
			m[i,j] = q 
	return m[i,j] 
	
	
memoized_matrix_chain(p)
	n = p.len -1 
	let m[1..n,1..n] be new table 
	for i = 1 to n 
		for j = i to n 
			m[i,j] = inf 
	return look-up-chain(m,p,1,n) 
	
look-up-chain(m,p,i,j) 
	if m[i,j] < inf 
		return m[i,j] 
	if i==j 
		m[i,j] = 0 
	else 
		for k = i to j-1 
			q = look-up-chain(m,p,i,k)
				+ look-up-chain(m,p,k+1,j)
				+ pi-1pkpj
			if q < m[i,j]
				m[i,j] =q 
	return m[i,j] 